* SAT - solver model

** let D0 - domain from 0 to 9
** let D  - domain from 1 to 9

** given matrix sudoku with entries from D0

** find matrix sol with entries from D

*** such that :

** for all i in D0
   for all j in D0
      if sudoki[i][j] \= 0 then sol[i][j] = sudoku[i][j]

** for all i in D
   all different sol[i]

** for all j in D
   all different sol[][j]

** for all *mini-squares*
  all different *mini-square*



#+NAME: Conjure Model
#+BEGIN_SRC
  language Essence 1.3

  letting D0 be domain int(0..9)
  letting Id be domain int(1..3)
  letting D  be domain int(1..9)

  given initial : matrix indexed by [D0, D0] of D

  find sudoku : matrix indexed by [D, D] of D
  find blocks : matrix indexed by [Id, Id] of matrix indexed by Id

  such that

  $ Unique entries in each row and column
  forAll i: D . allDiff(sudoku[i,..]) /\ allDiff(sudoku[..,j])

  $ Unique entries in each block
  forAll i, j: Id . forAll k, l: D .
     allDiff(block[i,j][k,..]) /\ allDiff(block[i,j][..,l])

  forAll i, j, k, l: Id .
     block[i, j][k, l] = sudoku[(3 * i) - (3 - k)][(3 * j) - (3 - l))]
#+END_SRC

[[https://sudoku.com/how-to-play/sudoku-rules-for-complete-beginners/][Sudoku example site]]

#+NAME: Param File
#+BEGIN_SRC <language> <switches> <header arguments>
  language Essence 1.3

  letting SQ11 be [

     [ 0, 7, 2,   0, 0, 4,   9, 0, 0; int(1..9)],
     [ 3, 0, 4,   0, 8, 9,   1, 0, 0; int(1..9)],
     [ 8, 1, 9,   0, 0, 6,   2, 5, 4; int(1..9)],

     [ 7, 0, 1,   0, 0, 0,   0, 0, 9; int(1..9)],
     [ 9, 0, 0,   0, 0, 2,   0, 7, 0; int(1..9)],
     [ 0, 0, 0,   8, 0, 7,   0, 1, 2; int(1..9)],

     [ 4, 0, 5,   0, 0, 1,   6, 2, 0; int(1..9)],
     [ 2, 3, 7,   0, 0, 0,   5, 0, 1; int(1..9)],
     [ 0, 0, 0,   0, 2, 5,   7, 0, 0; int(1..9)],

        int(0..9)]
        #+END_SRC

